import React, { useState } from 'react';
import styled from 'styled-components';
import { Button } from '../../styles/globalStyles';

interface DeleteRulesDialogProps {
  isOpen: boolean;
  totalRules: number;
  systemRulesCount: number;
  autoGeneratedRulesCount: number;
  userDefinedRulesCount: number;
  onClose: () => void;
  onConfirm: (options: {
    system: boolean;
    autoGenerated: boolean;
    userDefined: boolean;
  }) => void;
}

const DialogOverlay = styled.div<{ $isOpen: boolean }>`
  display: ${props => props.$isOpen ? 'flex' : 'none'};
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  align-items: center;
  justify-content: center;
  z-index: 1000;
`;

const DialogContent = styled.div`
  background: white;
  border-radius: 8px;
  padding: 24px;
  min-width: 500px;
  max-width: 600px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
`;

const DialogTitle = styled.h2`
  margin: 0 0 16px 0;
  font-size: 20px;
  font-weight: 600;
  color: #d32f2f;
`;

const DialogMessage = styled.p`
  margin: 0 0 24px 0;
  font-size: 14px;
  color: #666;
  line-height: 1.5;
`;

const RuleTypeSection = styled.div`
  margin: 16px 0;
  border: 1px solid #e0e0e0;
  border-radius: 6px;
  padding: 16px;
  background-color: #fafafa;
`;

const CheckboxLabel = styled.label`
  display: flex;
  align-items: flex-start;
  cursor: pointer;
  font-size: 14px;
  gap: 8px;
`;

const Checkbox = styled.input`
  margin-top: 2px;
`;

const RuleTypeTitle = styled.div`
  font-weight: 600;
  color: #333;
`;

const RuleTypeDescription = styled.div`
  color: #666;
  font-size: 13px;
  margin-top: 4px;
`;

const RuleCount = styled.span`
  color: #666;
  font-size: 13px;
  margin-left: 8px;
`;

const ButtonGroup = styled.div`
  display: flex;
  gap: 12px;
  justify-content: flex-end;
  margin-top: 24px;
  padding-top: 16px;
  border-top: 1px solid #e0e0e0;
`;

const WarningText = styled.div<{ $show: boolean }>`
  display: ${props => props.$show ? 'block' : 'none'};
  background-color: #fff3cd;
  border: 1px solid #ffeaa7;
  border-radius: 4px;
  padding: 12px;
  margin: 16px 0;
  color: #856404;
  font-size: 14px;
`;

export const DeleteRulesDialog: React.FC<DeleteRulesDialogProps> = ({
  isOpen,
  totalRules,
  systemRulesCount,
  autoGeneratedRulesCount,
  userDefinedRulesCount,
  onClose,
  onConfirm,
}) => {
  const [deleteSystem, setDeleteSystem] = useState(false);
  const [deleteAutoGenerated, setDeleteAutoGenerated] = useState(false);
  const [deleteUserDefined, setDeleteUserDefined] = useState(false);

  const selectedCount = 
    (deleteSystem ? systemRulesCount : 0) +
    (deleteAutoGenerated ? autoGeneratedRulesCount : 0) +
    (deleteUserDefined ? userDefinedRulesCount : 0);

  const hasSelection = deleteSystem || deleteAutoGenerated || deleteUserDefined;

  const handleConfirm = () => {
    if (!hasSelection) return;
    
    onConfirm({
      system: deleteSystem,
      autoGenerated: deleteAutoGenerated,
      userDefined: deleteUserDefined,
    });

    // Reset state
    setDeleteSystem(false);
    setDeleteAutoGenerated(false);
    setDeleteUserDefined(false);
  };

  const handleClose = () => {
    // Reset state
    setDeleteSystem(false);
    setDeleteAutoGenerated(false);
    setDeleteUserDefined(false);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <DialogOverlay $isOpen={isOpen} onClick={handleClose}>
      <DialogContent onClick={(e) => e.stopPropagation()}>
        <DialogTitle>üóëÔ∏è Delete Rules</DialogTitle>
        <DialogMessage>
          Choose which types of rules to delete. You currently have {totalRules} rule(s) total.
          <br />
          <strong>This action cannot be undone.</strong>
        </DialogMessage>

        {systemRulesCount > 0 && (
          <RuleTypeSection>
            <CheckboxLabel>
              <Checkbox
                type="checkbox"
                checked={deleteSystem}
                onChange={(e) => setDeleteSystem(e.target.checked)}
              />
              <div>
                <RuleTypeTitle>
                  System Rules
                  <RuleCount>({systemRulesCount} rules)</RuleCount>
                </RuleTypeTitle>
                <RuleTypeDescription>
                  Automatically created rules for transfer detection and bank fee protection.
                  These help categorize transfers and identify bank fees.
                </RuleTypeDescription>
              </div>
            </CheckboxLabel>
          </RuleTypeSection>
        )}

        {autoGeneratedRulesCount > 0 && (
          <RuleTypeSection>
            <CheckboxLabel>
              <Checkbox
                type="checkbox"
                checked={deleteAutoGenerated}
                onChange={(e) => setDeleteAutoGenerated(e.target.checked)}
              />
              <div>
                <RuleTypeTitle>
                  Auto-Generated Rules
                  <RuleCount>({autoGeneratedRulesCount} rules)</RuleCount>
                </RuleTypeTitle>
                <RuleTypeDescription>
                  Rules created automatically from high-confidence AI categorizations.
                  These speed up future transaction processing.
                </RuleTypeDescription>
              </div>
            </CheckboxLabel>
          </RuleTypeSection>
        )}

        {userDefinedRulesCount > 0 && (
          <RuleTypeSection>
            <CheckboxLabel>
              <Checkbox
                type="checkbox"
                checked={deleteUserDefined}
                onChange={(e) => setDeleteUserDefined(e.target.checked)}
              />
              <div>
                <RuleTypeTitle>
                  User-Defined Rules
                  <RuleCount>({userDefinedRulesCount} rules)</RuleCount>
                </RuleTypeTitle>
                <RuleTypeDescription>
                  Rules you created manually or from manual categorizations.
                  These contain your personal categorization preferences.
                </RuleTypeDescription>
              </div>
            </CheckboxLabel>
          </RuleTypeSection>
        )}

        <WarningText $show={hasSelection}>
          You are about to delete {selectedCount} rule(s). This will affect future automatic categorization.
        </WarningText>

        <ButtonGroup>
          <Button 
            variant="outline" 
            onClick={handleClose}
          >
            Cancel
          </Button>
          <Button 
            style={{ 
              backgroundColor: '#d32f2f', 
              color: 'white',
              opacity: hasSelection ? 1 : 0.5,
              cursor: hasSelection ? 'pointer' : 'not-allowed'
            }}
            onClick={handleConfirm}
            disabled={!hasSelection}
          >
            Delete Selected ({selectedCount})
          </Button>
        </ButtonGroup>
      </DialogContent>
    </DialogOverlay>
  );
};